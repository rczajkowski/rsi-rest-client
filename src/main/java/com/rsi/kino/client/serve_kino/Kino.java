
package com.rsi.kino.client.serve_kino;

import java.awt.Image;
import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Kino", targetNamespace = "http://serve_kino/")
public interface Kino {


    /**
     * 
     * @return
     *     returns java.util.List<serve_kino.Film>
     */
    @WebMethod(action = "getAllFilms")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllFilms", targetNamespace = "http://serve_kino/", className = "serve_kino.GetAllFilms")
    @ResponseWrapper(localName = "getAllFilmsResponse", targetNamespace = "http://serve_kino/", className = "serve_kino.GetAllFilmsResponse")
    @Action(input = "getAllFilms", output = "http://serve_kino/Kino/getAllFilmsResponse")
    public List<Film> getAllFilms();

    /**
     * 
     * @param arg0
     * @return
     *     returns java.awt.Image
     * @throws ObjectNotFoundException_Exception
     */
    @WebMethod(action = "getImage")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getImage", targetNamespace = "http://serve_kino/", className = "serve_kino.GetImage")
    @ResponseWrapper(localName = "getImageResponse", targetNamespace = "http://serve_kino/", className = "serve_kino.GetImageResponse")
    @Action(input = "getImage", output = "http://serve_kino/Kino/getImageResponse", fault = {
        @FaultAction(className = ObjectNotFoundException_Exception.class, value = "http://serve_kino/Kino/getImage/Fault/ObjectNotFoundException")
    })
    public Image getImage(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws ObjectNotFoundException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws FileNotFoundException_Exception
     * @throws DocumentException_Exception
     */
    @WebMethod(action = "makeReseravation")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "makeReseravation", targetNamespace = "http://serve_kino/", className = "serve_kino.MakeReseravation")
    @ResponseWrapper(localName = "makeReseravationResponse", targetNamespace = "http://serve_kino/", className = "serve_kino.MakeReseravationResponse")
    @Action(input = "makeReseravation", output = "http://serve_kino/Kino/makeReseravationResponse", fault = {
        @FaultAction(className = FileNotFoundException_Exception.class, value = "http://serve_kino/Kino/makeReseravation/Fault/FileNotFoundException"),
        @FaultAction(className = DocumentException_Exception.class, value = "http://serve_kino/Kino/makeReseravation/Fault/DocumentException")
    })
    public String makeReseravation(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        List<Integer> arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        Long arg3)
        throws DocumentException_Exception, FileNotFoundException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws ObjectNotFoundException_Exception
     */
    @WebMethod(action = "resignation")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "resignation", targetNamespace = "http://serve_kino/", className = "serve_kino.Resignation")
    @ResponseWrapper(localName = "resignationResponse", targetNamespace = "http://serve_kino/", className = "serve_kino.ResignationResponse")
    @Action(input = "resignation", output = "http://serve_kino/Kino/resignationResponse", fault = {
        @FaultAction(className = ObjectNotFoundException_Exception.class, value = "http://serve_kino/Kino/resignation/Fault/ObjectNotFoundException")
    })
    public String resignation(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws ObjectNotFoundException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws ObjectNotFoundException_Exception
     * @throws FileNotFoundException_Exception
     * @throws DocumentException_Exception
     */
    @WebMethod(action = "updateReservation")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateReservation", targetNamespace = "http://serve_kino/", className = "serve_kino.UpdateReservation")
    @ResponseWrapper(localName = "updateReservationResponse", targetNamespace = "http://serve_kino/", className = "serve_kino.UpdateReservationResponse")
    @Action(input = "updateReservation", output = "http://serve_kino/Kino/updateReservationResponse", fault = {
        @FaultAction(className = ObjectNotFoundException_Exception.class, value = "http://serve_kino/Kino/updateReservation/Fault/ObjectNotFoundException"),
        @FaultAction(className = FileNotFoundException_Exception.class, value = "http://serve_kino/Kino/updateReservation/Fault/FileNotFoundException"),
        @FaultAction(className = DocumentException_Exception.class, value = "http://serve_kino/Kino/updateReservation/Fault/DocumentException")
    })
    public String updateReservation(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        List<Integer> arg1)
        throws DocumentException_Exception, FileNotFoundException_Exception, ObjectNotFoundException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<serve_kino.Reservation>
     */
    @WebMethod(action = "getAllUserReservations")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllUserReservations", targetNamespace = "http://serve_kino/", className = "serve_kino.GetAllUserReservations")
    @ResponseWrapper(localName = "getAllUserReservationsResponse", targetNamespace = "http://serve_kino/", className = "serve_kino.GetAllUserReservationsResponse")
    @Action(input = "getAllUserReservations", output = "http://serve_kino/Kino/getAllUserReservationsResponse")
    public List<Reservation> getAllUserReservations(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

}
